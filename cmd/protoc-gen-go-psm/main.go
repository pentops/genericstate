package main

import (
	"flag"
	"fmt"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/pluginpb"

	"github.com/pentops/protostate/cmd/protoc-gen-go-psm/query"
	"github.com/pentops/protostate/cmd/protoc-gen-go-psm/state"
)

var Version = "1.0"

func main() {
	showVersion := flag.Bool("version", false, "print the version and exit")
	flag.Parse()
	if *showVersion {
		fmt.Printf("protoc-gen-go-psm %v\n", Version)
		return
	}

	var flags flag.FlagSet

	protogen.Options{
		ParamFunc: flags.Set,
	}.Run(func(gen *protogen.Plugin) error {
		gen.SupportedFeatures = uint64(pluginpb.CodeGeneratorResponse_FEATURE_PROTO3_OPTIONAL)
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			generateFile(gen, f)
		}
		return nil
	})
}

// generateFile generates a _psm.pb.go
func generateFile(gen *protogen.Plugin, file *protogen.File) {

	sourceMap, err := mapSourceFile(file)
	if err != nil {
		gen.Error(err)
		return
	}

	if len(sourceMap.stateSets) > 0 {

		filename := file.GeneratedFilenamePrefix + "_psm.pb.go"
		g := gen.NewGeneratedFile(filename, file.GoImportPath)
		g.P("// Code generated by protoc-gen-go-psm. DO NOT EDIT.")
		g.P()
		g.P("package ", file.GoPackageName)
		g.P()

		// Build the state sets from the source file
		for _, stateSet := range sourceMap.stateSets {
			converted, err := state.BuildStateSet(*stateSet)
			if err != nil {
				gen.Error(err)

				continue
			}

			converted.Write(g)
		}

	}
	if len(sourceMap.querySets) > 0 {
		filename := file.GeneratedFilenamePrefix + "_psm_query.pb.go"
		g := gen.NewGeneratedFile(filename, file.GoImportPath)
		g.P("// Code generated by protoc-gen-go-psm. DO NOT EDIT.")
		g.P()
		g.P("package ", file.GoPackageName)
		g.P()

		for _, querySrc := range sourceMap.querySets {
			converted, err := query.BuildQuerySet(*querySrc)
			if err != nil {
				gen.Error(err)
				continue

			}
			converted.Write(g)
		}
	}

	return
}
