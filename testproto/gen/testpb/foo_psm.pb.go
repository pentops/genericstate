// Code generated by protoc-gen-go-psm. DO NOT EDIT.

package testpb

import (
	context "context"
	psm_pb "github.com/pentops/protostate/gen/state/v1/psm_pb"
	psm "github.com/pentops/protostate/psm"
	sqrlx "github.com/pentops/sqrlx.go/sqrlx"
	proto "google.golang.org/protobuf/proto"
)

// StateObjectOptions: FooPSM
type FooPSM = psm.StateMachine[
	*FooKeys,
	*FooState,
	FooStatus,
	*FooEvent,
	FooPSMEvent,
]

type FooPSMDB = psm.DBStateMachine[
	*FooKeys,
	*FooState,
	FooStatus,
	*FooEvent,
	FooPSMEvent,
]

type FooPSMEventer = psm.Eventer[
	*FooKeys,
	*FooState,
	FooStatus,
	*FooEvent,
	FooPSMEvent,
]

func DefaultFooPSMConfig() *psm.StateMachineConfig[
	*FooKeys,
	*FooState,
	FooStatus,
	*FooEvent,
	FooPSMEvent,
] {
	return psm.NewStateMachineConfig[
		*FooKeys,
		*FooState,
		FooStatus,
		*FooEvent,
		FooPSMEvent,
	](DefaultFooPSMTableSpec)
}

func NewFooPSM(config *psm.StateMachineConfig[
	*FooKeys,
	*FooState,
	FooStatus,
	*FooEvent,
	FooPSMEvent,
]) (*FooPSM, error) {
	return psm.NewStateMachine[
		*FooKeys,
		*FooState,
		FooStatus,
		*FooEvent,
		FooPSMEvent,
	](config)
}

type FooPSMTableSpec = psm.PSMTableSpec[
	*FooKeys,
	*FooState,
	FooStatus,
	*FooEvent,
	FooPSMEvent,
]

var DefaultFooPSMTableSpec = FooPSMTableSpec{
	State: psm.TableSpec[*FooState]{
		TableName:  "foo",
		DataColumn: "state",
		StoreExtraColumns: func(state *FooState) (map[string]interface{}, error) {
			return map[string]interface{}{
				"tenant_id": state.Keys.TenantId,
			}, nil
		},
		PKFieldPaths: []string{
			"foo_id",
		},
	},
	Event: psm.TableSpec[*FooEvent]{
		TableName:  "foo_event",
		DataColumn: "data",
		StoreExtraColumns: func(event *FooEvent) (map[string]interface{}, error) {
			metadata := event.Metadata
			return map[string]interface{}{
				"id":        metadata.EventId,
				"timestamp": metadata.Timestamp,
				"cause":     metadata.Cause,
				"sequence":  metadata.Sequence,
				"foo_id":    event.Keys.FooId,
				"tenant_id": event.Keys.TenantId,
			}, nil
		},
		PKFieldPaths: []string{
			"metadata.EventId",
		},
		PK: func(event *FooEvent) (map[string]interface{}, error) {
			return map[string]interface{}{
				"id": event.Metadata.EventId,
			}, nil
		},
	},
	PrimaryKey: func(event *FooEvent) (map[string]interface{}, error) {
		return map[string]interface{}{
			"id": event.Keys.FooId,
		}, nil
	},
}

type FooPSMTransitionBaton = psm.TransitionBaton[
	*FooKeys,
	*FooState,
	FooStatus,
	*FooEvent,
	FooPSMEvent,
]

type FooPSMHookBaton = psm.StateHookBaton[
	*FooKeys,
	*FooState,
	FooStatus,
	*FooEvent,
	FooPSMEvent,
]

func FooPSMFunc[SE FooPSMEvent](cb func(context.Context, FooPSMTransitionBaton, *FooState, SE) error) psm.PSMCombinedFunc[
	*FooKeys,
	*FooState,
	FooStatus,
	*FooEvent,
	FooPSMEvent,
	SE,
] {
	return psm.PSMCombinedFunc[
		*FooKeys,
		*FooState,
		FooStatus,
		*FooEvent,
		FooPSMEvent,
		SE,
	](cb)
}
func FooPSMTransition[SE FooPSMEvent](cb func(context.Context, *FooState, SE) error) psm.PSMTransitionFunc[
	*FooKeys,
	*FooState,
	FooStatus,
	*FooEvent,
	FooPSMEvent,
	SE,
] {
	return psm.PSMTransitionFunc[
		*FooKeys,
		*FooState,
		FooStatus,
		*FooEvent,
		FooPSMEvent,
		SE,
	](cb)
}
func FooPSMHook[SE FooPSMEvent](cb func(context.Context, sqrlx.Transaction, FooPSMHookBaton, *FooState, SE) error) psm.PSMHookFunc[
	*FooKeys,
	*FooState,
	FooStatus,
	*FooEvent,
	FooPSMEvent,
	SE,
] {
	return psm.PSMHookFunc[
		*FooKeys,
		*FooState,
		FooStatus,
		*FooEvent,
		FooPSMEvent,
		SE,
	](cb)
}
func FooPSMGeneralHook(cb func(context.Context, sqrlx.Transaction, *FooState, *FooEvent) error) psm.GeneralStateHook[
	*FooKeys,
	*FooState,
	FooStatus,
	*FooEvent,
	FooPSMEvent,
] {
	return psm.GeneralStateHook[
		*FooKeys,
		*FooState,
		FooStatus,
		*FooEvent,
		FooPSMEvent,
	](cb)
}

type FooPSMEventKey = string

const (
	FooPSMEventNil     FooPSMEventKey = "<nil>"
	FooPSMEventCreated FooPSMEventKey = "created"
	FooPSMEventUpdated FooPSMEventKey = "updated"
	FooPSMEventDeleted FooPSMEventKey = "deleted"
)

type FooPSMEvent interface {
	proto.Message
	PSMEventKey() FooPSMEventKey
}

func (etw *FooEventType) UnwrapPSMEvent() FooPSMEvent {
	if etw == nil {
		return nil
	}
	switch v := etw.Type.(type) {
	case *FooEventType_Created_:
		return v.Created
	case *FooEventType_Updated_:
		return v.Updated
	case *FooEventType_Deleted_:
		return v.Deleted
	default:
		return nil
	}
}
func (etw *FooEventType) PSMEventKey() FooPSMEventKey {
	tt := etw.UnwrapPSMEvent()
	if tt == nil {
		return FooPSMEventNil
	}
	return tt.PSMEventKey()
}
func (etw *FooEventType) SetPSMEvent(inner FooPSMEvent) {
	switch v := inner.(type) {
	case *FooEventType_Created:
		etw.Type = &FooEventType_Created_{Created: v}
	case *FooEventType_Updated:
		etw.Type = &FooEventType_Updated_{Updated: v}
	case *FooEventType_Deleted:
		etw.Type = &FooEventType_Deleted_{Deleted: v}
	default:
		panic("invalid type")
	}
}

func (ee *FooEvent) PSMEventKey() FooPSMEventKey {
	return ee.Event.PSMEventKey()
}

func (ee *FooEvent) UnwrapPSMEvent() FooPSMEvent {
	return ee.Event.UnwrapPSMEvent()
}

func (ee *FooEvent) SetPSMEvent(inner FooPSMEvent) {
	if ee.Event == nil {
		ee.Event = &FooEventType{}
	}
	ee.Event.SetPSMEvent(inner)
}

func (*FooEventType_Created) PSMEventKey() FooPSMEventKey {
	return FooPSMEventCreated
}
func (*FooEventType_Updated) PSMEventKey() FooPSMEventKey {
	return FooPSMEventUpdated
}
func (*FooEventType_Deleted) PSMEventKey() FooPSMEventKey {
	return FooPSMEventDeleted
}
func (ee *FooEvent) PSMMetadata() *psm_pb.EventMetadata {
	if ee.Metadata == nil {
		ee.Metadata = &psm_pb.EventMetadata{}
	}
	return ee.Metadata
}

func (st *FooState) PSMMetadata() *psm_pb.StateMetadata {
	if st.Metadata == nil {
		st.Metadata = &psm_pb.StateMetadata{}
	}
	return st.Metadata
}

func (ee *FooEvent) PSMKeys() *FooKeys {
	return ee.Keys
}

func (ee *FooEvent) SetPSMKeys(inner *FooKeys) {
	ee.Keys = inner
}

func (st *FooState) PSMKeys() *FooKeys {
	return st.Keys
}

func (st *FooState) SetPSMKeys(inner *FooKeys) {
	st.Keys = inner
}

// State Query Service for %sFoo
// QuerySet is the query set for the Foo service.

type FooPSMQuerySet = psm.StateQuerySet[
	*GetFooRequest,
	*GetFooResponse,
	*ListFoosRequest,
	*ListFoosResponse,
	*ListFooEventsRequest,
	*ListFooEventsResponse,
]

func NewFooPSMQuerySet(
	smSpec psm.QuerySpec[
		*GetFooRequest,
		*GetFooResponse,
		*ListFoosRequest,
		*ListFoosResponse,
		*ListFooEventsRequest,
		*ListFooEventsResponse,
	],
	options psm.StateQueryOptions,
) (*FooPSMQuerySet, error) {
	return psm.BuildStateQuerySet[
		*GetFooRequest,
		*GetFooResponse,
		*ListFoosRequest,
		*ListFoosResponse,
		*ListFooEventsRequest,
		*ListFooEventsResponse,
	](smSpec, options)
}

type FooPSMQuerySpec = psm.QuerySpec[
	*GetFooRequest,
	*GetFooResponse,
	*ListFoosRequest,
	*ListFoosResponse,
	*ListFooEventsRequest,
	*ListFooEventsResponse,
]

func DefaultFooPSMQuerySpec(tableSpec psm.QueryTableSpec) FooPSMQuerySpec {
	return psm.QuerySpec[
		*GetFooRequest,
		*GetFooResponse,
		*ListFoosRequest,
		*ListFoosResponse,
		*ListFooEventsRequest,
		*ListFooEventsResponse,
	]{
		QueryTableSpec: tableSpec,
		ListRequestFilter: func(req *ListFoosRequest) (map[string]interface{}, error) {
			filter := map[string]interface{}{}
			if req.TenantId != nil {
				filter["tenant_id"] = *req.TenantId
			}
			return filter, nil
		},
		ListEventsRequestFilter: func(req *ListFooEventsRequest) (map[string]interface{}, error) {
			filter := map[string]interface{}{}
			filter["foo_id"] = req.FooId
			return filter, nil
		},
	}
}
