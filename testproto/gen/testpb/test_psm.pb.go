// Code generated by protoc-gen-go-psm. DO NOT EDIT.

package testpb

import (
	context "context"
	psm "github.com/pentops/protostate/psm"
	proto "google.golang.org/protobuf/proto"
)

// StateObjectOptions: FooPSM
type FooPSM struct {
	*psm.Eventer[
		*FooState,
		FooStatus,
		*FooEvent,
		FooPSMEvent,
	]
}

type FooPSMSpec = psm.StateSpec[
	*FooState,
	FooStatus,
	*FooEvent,
	FooPSMEvent,
]

type FooPSMTransitionBaton = psm.TransitionBaton[*FooEvent, FooPSMEvent]

type FooPSMEventKey string

const (
	FooPSMEventCreated FooPSMEventKey = "created"
	FooPSMEventUpdated FooPSMEventKey = "updated"
	FooPSMEventDeleted FooPSMEventKey = "deleted"
)

type FooPSMEvent interface {
	proto.Message
	PSMEventKey() FooPSMEventKey
}
type FooPSMConverter struct {
	NewMetadata     func(context.Context) *Metadata
	ExtractMetadata func(*Metadata) *psm.Metadata
}

func (c FooPSMConverter) Wrap(ctx context.Context, s *FooState, e FooPSMEvent) *FooEvent {
	wrapper := &FooEvent{
		Metadata: c.NewMetadata(ctx),
		FooId:    s.FooId,
	}
	wrapper.SetPSMEvent(e)
	return wrapper
}

func (c FooPSMConverter) Unwrap(e *FooEvent) FooPSMEvent {
	return e.UnwrapPSMEvent()
}

func (c FooPSMConverter) StateLabel(s *FooState) string {
	return s.Status.String()
}

func (c FooPSMConverter) EventLabel(e FooPSMEvent) string {
	return string(e.PSMEventKey())
}

func (c FooPSMConverter) EventMetadata(e *FooEvent) *psm.Metadata {
	return c.ExtractMetadata(e.Metadata)
}

func (c FooPSMConverter) EmptyState(e *FooEvent) *FooState {
	return &FooState{
		FooId: e.FooId,
	}
}

func (ee *FooEvent) UnwrapPSMEvent() FooPSMEvent {
	switch v := ee.Event.Type.(type) {
	case *FooEventType_Created_:
		return v.Created
	case *FooEventType_Updated_:
		return v.Updated
	case *FooEventType_Deleted_:
		return v.Deleted
	default:
		return nil
	}
}
func (ee *FooEvent) SetPSMEvent(inner FooPSMEvent) {
	switch v := inner.(type) {
	case *FooEventType_Created:
		ee.Event.Type = &FooEventType_Created_{Created: v}
	case *FooEventType_Updated:
		ee.Event.Type = &FooEventType_Updated_{Updated: v}
	case *FooEventType_Deleted:
		ee.Event.Type = &FooEventType_Deleted_{Deleted: v}
	default:
		panic("invalid type")
	}
}
func (*FooEventType_Created) PSMEventKey() FooPSMEventKey {
	return FooPSMEventCreated
}
func (*FooEventType_Updated) PSMEventKey() FooPSMEventKey {
	return FooPSMEventUpdated
}
func (*FooEventType_Deleted) PSMEventKey() FooPSMEventKey {
	return FooPSMEventDeleted
}
