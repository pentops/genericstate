// Code generated by protoc-gen-go-psm. DO NOT EDIT.

package testpb

import (
	context "context"
	fmt "fmt"
	psm "github.com/pentops/protostate/psm"
	proto "google.golang.org/protobuf/proto"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// StateObjectOptions: BarPSM
type BarPSMEventer = psm.Eventer[
	*BarState,
	BarStatus,
	*BarEvent,
	BarPSMEvent,
]

type BarPSM = psm.StateMachine[
	*BarState,
	BarStatus,
	*BarEvent,
	BarPSMEvent,
]

func DefaultBarPSMConfig() *psm.StateMachineConfig[
	*BarState,
	BarStatus,
	*BarEvent,
	BarPSMEvent,
] {
	return psm.NewStateMachineConfig[
		*BarState,
		BarStatus,
		*BarEvent,
		BarPSMEvent,
	](BarPSMConverter{}, DefaultBarPSMTableSpec)
}

func NewBarPSM(db psm.Transactor, config *psm.StateMachineConfig[
	*BarState,
	BarStatus,
	*BarEvent,
	BarPSMEvent,
]) (*BarPSM, error) {
	return psm.NewStateMachine[
		*BarState,
		BarStatus,
		*BarEvent,
		BarPSMEvent,
	](db, config)
}

type BarPSMTableSpec = psm.TableSpec[
	*BarState,
	BarStatus,
	*BarEvent,
	BarPSMEvent,
]

var DefaultBarPSMTableSpec = BarPSMTableSpec{
	StateTable: "bar",
	EventTable: "bar_event",
	PrimaryKey: func(event *BarEvent) (map[string]interface{}, error) {
		return map[string]interface{}{
			"id": event.BarId,
		}, nil
	},
	StateColumns: func(state *BarState) (map[string]interface{}, error) {
		return map[string]interface{}{}, nil
	},
	EventColumns: func(event *BarEvent) (map[string]interface{}, error) {
		metadata := event.Metadata
		return map[string]interface{}{
			"id":        metadata.EventId,
			"timestamp": metadata.Timestamp,
			"bar_id":    event.BarId,
		}, nil
	},
	EventPrimaryKeyFieldPaths: []string{
		"metadata.event_id",
	},
	StatePrimaryKeyFieldPaths: []string{
		"bar_id",
	},
}

type BarPSMTransitionBaton = psm.TransitionBaton[*BarEvent, BarPSMEvent]

func BarPSMFunc[SE BarPSMEvent](cb func(context.Context, BarPSMTransitionBaton, *BarState, SE) error) psm.TransitionFunc[
	*BarState,
	BarStatus,
	*BarEvent,
	BarPSMEvent,
	SE,
] {
	return psm.TransitionFunc[
		*BarState,
		BarStatus,
		*BarEvent,
		BarPSMEvent,
		SE,
	](cb)
}

type BarPSMEventKey string

const (
	BarPSMEventNil     BarPSMEventKey = "<nil>"
	BarPSMEventCreated BarPSMEventKey = "created"
	BarPSMEventUpdated BarPSMEventKey = "updated"
	BarPSMEventDeleted BarPSMEventKey = "deleted"
)

type BarPSMEvent interface {
	proto.Message
	PSMEventKey() BarPSMEventKey
}
type BarPSMConverter struct{}

func (c BarPSMConverter) Unwrap(e *BarEvent) BarPSMEvent {
	return e.UnwrapPSMEvent()
}

func (c BarPSMConverter) StateLabel(s *BarState) string {
	return s.Status.String()
}

func (c BarPSMConverter) EventLabel(e BarPSMEvent) string {
	return string(e.PSMEventKey())
}

func (c BarPSMConverter) EmptyState(e *BarEvent) *BarState {
	return &BarState{
		BarId: e.BarId,
	}
}

func (c BarPSMConverter) DeriveChainEvent(e *BarEvent, systemActor psm.SystemActor, eventKey string) *BarEvent {
	metadata := &StrangeMetadata{
		EventId:   systemActor.NewEventID(e.Metadata.EventId, eventKey),
		Timestamp: timestamppb.Now(),
	}
	return &BarEvent{
		Metadata: metadata,
		BarId:    e.BarId,
	}
}

func (c BarPSMConverter) CheckStateKeys(s *BarState, e *BarEvent) error {
	if s.BarId != e.BarId {
		return fmt.Errorf("state field 'BarId' %q does not match event field %q", s.BarId, e.BarId)
	}
	return nil
}

func (ee *BarEventType) UnwrapPSMEvent() BarPSMEvent {
	if ee == nil {
		return nil
	}
	switch v := ee.Type.(type) {
	case *BarEventType_Created_:
		return v.Created
	case *BarEventType_Updated_:
		return v.Updated
	case *BarEventType_Deleted_:
		return v.Deleted
	default:
		return nil
	}
}
func (ee *BarEventType) PSMEventKey() BarPSMEventKey {
	tt := ee.UnwrapPSMEvent()
	if tt == nil {
		return BarPSMEventNil
	}
	return tt.PSMEventKey()
}
func (ee *BarEvent) PSMEventKey() BarPSMEventKey {
	return ee.Event.PSMEventKey()
}
func (ee *BarEvent) UnwrapPSMEvent() BarPSMEvent {
	return ee.Event.UnwrapPSMEvent()
}
func (ee *BarEvent) SetPSMEvent(inner BarPSMEvent) {
	if ee.Event == nil {
		ee.Event = &BarEventType{}
	}
	switch v := inner.(type) {
	case *BarEventType_Created:
		ee.Event.Type = &BarEventType_Created_{Created: v}
	case *BarEventType_Updated:
		ee.Event.Type = &BarEventType_Updated_{Updated: v}
	case *BarEventType_Deleted:
		ee.Event.Type = &BarEventType_Deleted_{Deleted: v}
	default:
		panic("invalid type")
	}
}
func (*BarEventType_Created) PSMEventKey() BarPSMEventKey {
	return BarPSMEventCreated
}
func (*BarEventType_Updated) PSMEventKey() BarPSMEventKey {
	return BarPSMEventUpdated
}
func (*BarEventType_Deleted) PSMEventKey() BarPSMEventKey {
	return BarPSMEventDeleted
}

// State Query Service for %sbar
// QuerySet is the query set for the Bar service.

type BarPSMQuerySet = psm.StateQuerySet[
	*GetBarRequest,
	*GetBarResponse,
	*ListBarsRequest,
	*ListBarsResponse,
	proto.Message,
	proto.Message,
]

func NewBarPSMQuerySet(
	smSpec psm.QuerySpec[
		*GetBarRequest,
		*GetBarResponse,
		*ListBarsRequest,
		*ListBarsResponse,
		proto.Message,
		proto.Message,
	],
	options psm.StateQueryOptions,
) (*BarPSMQuerySet, error) {
	return psm.BuildStateQuerySet[
		*GetBarRequest,
		*GetBarResponse,
		*ListBarsRequest,
		*ListBarsResponse,
		proto.Message,
		proto.Message,
	](smSpec, options)
}

type BarPSMQuerySpec = psm.QuerySpec[
	*GetBarRequest,
	*GetBarResponse,
	*ListBarsRequest,
	*ListBarsResponse,
	proto.Message,
	proto.Message,
]

func DefaultBarPSMQuerySpec(tableSpec psm.StateTableSpec) BarPSMQuerySpec {
	return psm.QuerySpec[
		*GetBarRequest,
		*GetBarResponse,
		*ListBarsRequest,
		*ListBarsResponse,
		proto.Message,
		proto.Message,
	]{
		StateTableSpec: tableSpec,
		ListRequestFilter: func(req *ListBarsRequest) (map[string]interface{}, error) {
			filter := map[string]interface{}{}
			if req.TenantId != nil {
				filter["tenant_id"] = *req.TenantId
			}
			return filter, nil
		},
	}
}
