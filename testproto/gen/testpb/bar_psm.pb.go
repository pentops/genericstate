// Code generated by protoc-gen-go-psm. DO NOT EDIT.

package testpb

import (
	context "context"
	psm_pb "github.com/pentops/protostate/gen/state/v1/psm_pb"
	psm "github.com/pentops/protostate/psm"
	sqrlx "github.com/pentops/sqrlx.go/sqrlx"
	proto "google.golang.org/protobuf/proto"
)

// StateObjectOptions: BarPSM
type BarPSM = psm.StateMachine[
	*BarKeys,
	*BarState,
	BarStatus,
	*BarEvent,
	BarPSMEvent,
]

type BarPSMDB = psm.DBStateMachine[
	*BarKeys,
	*BarState,
	BarStatus,
	*BarEvent,
	BarPSMEvent,
]

type BarPSMEventer = psm.Eventer[
	*BarKeys,
	*BarState,
	BarStatus,
	*BarEvent,
	BarPSMEvent,
]

func DefaultBarPSMConfig() *psm.StateMachineConfig[
	*BarKeys,
	*BarState,
	BarStatus,
	*BarEvent,
	BarPSMEvent,
] {
	return psm.NewStateMachineConfig[
		*BarKeys,
		*BarState,
		BarStatus,
		*BarEvent,
		BarPSMEvent,
	](DefaultBarPSMTableSpec)
}

func NewBarPSM(config *psm.StateMachineConfig[
	*BarKeys,
	*BarState,
	BarStatus,
	*BarEvent,
	BarPSMEvent,
]) (*BarPSM, error) {
	return psm.NewStateMachine[
		*BarKeys,
		*BarState,
		BarStatus,
		*BarEvent,
		BarPSMEvent,
	](config)
}

type BarPSMTableSpec = psm.PSMTableSpec[
	*BarKeys,
	*BarState,
	BarStatus,
	*BarEvent,
	BarPSMEvent,
]

var DefaultBarPSMTableSpec = BarPSMTableSpec{
	State: psm.TableSpec[*BarState]{
		TableName:  "bar",
		DataColumn: "state",
		StoreExtraColumns: func(state *BarState) (map[string]interface{}, error) {
			return map[string]interface{}{}, nil
		},
		PKFieldPaths: []string{
			"keys.bar_id",
		},
	},
	Event: psm.TableSpec[*BarEvent]{
		TableName:  "bar_event",
		DataColumn: "data",
		StoreExtraColumns: func(event *BarEvent) (map[string]interface{}, error) {
			metadata := event.Metadata
			return map[string]interface{}{
				"id":        metadata.EventId,
				"timestamp": metadata.Timestamp,
				"cause":     metadata.Cause,
				"sequence":  metadata.Sequence,
				"bar_id":    event.Keys.BarId,
			}, nil
		},
		PKFieldPaths: []string{
			"metadata.EventId",
		},
		PK: func(event *BarEvent) (map[string]interface{}, error) {
			return map[string]interface{}{
				"id": event.Metadata.EventId,
			}, nil
		},
	},
	PrimaryKey: func(event *BarEvent) (map[string]interface{}, error) {
		return map[string]interface{}{
			"id": event.Keys.BarId,
		}, nil
	},
}

type BarPSMTransitionBaton = psm.TransitionBaton[
	*BarKeys,
	*BarState,
	BarStatus,
	*BarEvent,
	BarPSMEvent,
]

type BarPSMHookBaton = psm.StateHookBaton[
	*BarKeys,
	*BarState,
	BarStatus,
	*BarEvent,
	BarPSMEvent,
]

func BarPSMFunc[SE BarPSMEvent](cb func(context.Context, BarPSMTransitionBaton, *BarState, SE) error) psm.PSMCombinedFunc[
	*BarKeys,
	*BarState,
	BarStatus,
	*BarEvent,
	BarPSMEvent,
	SE,
] {
	return psm.PSMCombinedFunc[
		*BarKeys,
		*BarState,
		BarStatus,
		*BarEvent,
		BarPSMEvent,
		SE,
	](cb)
}
func BarPSMTransition[SE BarPSMEvent](cb func(context.Context, *BarState, SE) error) psm.PSMTransitionFunc[
	*BarKeys,
	*BarState,
	BarStatus,
	*BarEvent,
	BarPSMEvent,
	SE,
] {
	return psm.PSMTransitionFunc[
		*BarKeys,
		*BarState,
		BarStatus,
		*BarEvent,
		BarPSMEvent,
		SE,
	](cb)
}
func BarPSMHook[SE BarPSMEvent](cb func(context.Context, sqrlx.Transaction, BarPSMHookBaton, *BarState, SE) error) psm.PSMHookFunc[
	*BarKeys,
	*BarState,
	BarStatus,
	*BarEvent,
	BarPSMEvent,
	SE,
] {
	return psm.PSMHookFunc[
		*BarKeys,
		*BarState,
		BarStatus,
		*BarEvent,
		BarPSMEvent,
		SE,
	](cb)
}
func BarPSMGeneralHook(cb func(context.Context, sqrlx.Transaction, *BarState, *BarEvent) error) psm.GeneralStateHook[
	*BarKeys,
	*BarState,
	BarStatus,
	*BarEvent,
	BarPSMEvent,
] {
	return psm.GeneralStateHook[
		*BarKeys,
		*BarState,
		BarStatus,
		*BarEvent,
		BarPSMEvent,
	](cb)
}

type BarPSMEventKey = string

const (
	BarPSMEventNil     BarPSMEventKey = "<nil>"
	BarPSMEventCreated BarPSMEventKey = "created"
	BarPSMEventUpdated BarPSMEventKey = "updated"
	BarPSMEventDeleted BarPSMEventKey = "deleted"
)

type BarPSMEvent interface {
	proto.Message
	PSMEventKey() BarPSMEventKey
}

func (etw *BarEventType) UnwrapPSMEvent() BarPSMEvent {
	if etw == nil {
		return nil
	}
	switch v := etw.Type.(type) {
	case *BarEventType_Created_:
		return v.Created
	case *BarEventType_Updated_:
		return v.Updated
	case *BarEventType_Deleted_:
		return v.Deleted
	default:
		return nil
	}
}
func (etw *BarEventType) PSMEventKey() BarPSMEventKey {
	tt := etw.UnwrapPSMEvent()
	if tt == nil {
		return BarPSMEventNil
	}
	return tt.PSMEventKey()
}
func (etw *BarEventType) SetPSMEvent(inner BarPSMEvent) {
	switch v := inner.(type) {
	case *BarEventType_Created:
		etw.Type = &BarEventType_Created_{Created: v}
	case *BarEventType_Updated:
		etw.Type = &BarEventType_Updated_{Updated: v}
	case *BarEventType_Deleted:
		etw.Type = &BarEventType_Deleted_{Deleted: v}
	default:
		panic("invalid type")
	}
}

func (ee *BarEvent) PSMEventKey() BarPSMEventKey {
	return ee.Event.PSMEventKey()
}

func (ee *BarEvent) UnwrapPSMEvent() BarPSMEvent {
	return ee.Event.UnwrapPSMEvent()
}

func (ee *BarEvent) SetPSMEvent(inner BarPSMEvent) {
	if ee.Event == nil {
		ee.Event = &BarEventType{}
	}
	ee.Event.SetPSMEvent(inner)
}

func (*BarEventType_Created) PSMEventKey() BarPSMEventKey {
	return BarPSMEventCreated
}
func (*BarEventType_Updated) PSMEventKey() BarPSMEventKey {
	return BarPSMEventUpdated
}
func (*BarEventType_Deleted) PSMEventKey() BarPSMEventKey {
	return BarPSMEventDeleted
}
func (ee *BarEvent) PSMMetadata() *psm_pb.EventMetadata {
	if ee.Metadata == nil {
		ee.Metadata = &psm_pb.EventMetadata{}
	}
	return ee.Metadata
}

func (st *BarState) PSMMetadata() *psm_pb.StateMetadata {
	if st.Metadata == nil {
		st.Metadata = &psm_pb.StateMetadata{}
	}
	return st.Metadata
}

func (ee *BarEvent) PSMKeys() *BarKeys {
	return ee.Keys
}

func (ee *BarEvent) SetPSMKeys(inner *BarKeys) {
	ee.Keys = inner
}

func (st *BarState) PSMKeys() *BarKeys {
	return st.Keys
}

func (st *BarState) SetPSMKeys(inner *BarKeys) {
	st.Keys = inner
}

// State Query Service for %sBar
// QuerySet is the query set for the Bar service.

type BarPSMQuerySet = psm.StateQuerySet[
	*GetBarRequest,
	*GetBarResponse,
	*ListBarsRequest,
	*ListBarsResponse,
	*ListBarEventsRequest,
	*ListBarEventsResponse,
]

func NewBarPSMQuerySet(
	smSpec psm.QuerySpec[
		*GetBarRequest,
		*GetBarResponse,
		*ListBarsRequest,
		*ListBarsResponse,
		*ListBarEventsRequest,
		*ListBarEventsResponse,
	],
	options psm.StateQueryOptions,
) (*BarPSMQuerySet, error) {
	return psm.BuildStateQuerySet[
		*GetBarRequest,
		*GetBarResponse,
		*ListBarsRequest,
		*ListBarsResponse,
		*ListBarEventsRequest,
		*ListBarEventsResponse,
	](smSpec, options)
}

type BarPSMQuerySpec = psm.QuerySpec[
	*GetBarRequest,
	*GetBarResponse,
	*ListBarsRequest,
	*ListBarsResponse,
	*ListBarEventsRequest,
	*ListBarEventsResponse,
]

func DefaultBarPSMQuerySpec(tableSpec psm.QueryTableSpec) BarPSMQuerySpec {
	return psm.QuerySpec[
		*GetBarRequest,
		*GetBarResponse,
		*ListBarsRequest,
		*ListBarsResponse,
		*ListBarEventsRequest,
		*ListBarEventsResponse,
	]{
		QueryTableSpec: tableSpec,
		ListRequestFilter: func(req *ListBarsRequest) (map[string]interface{}, error) {
			filter := map[string]interface{}{}
			if req.TenantId != nil {
				filter["tenant_id"] = *req.TenantId
			}
			return filter, nil
		},
		ListEventsRequestFilter: func(req *ListBarEventsRequest) (map[string]interface{}, error) {
			filter := map[string]interface{}{}
			filter["bar_id"] = req.BarId
			return filter, nil
		},
	}
}
