// Code generated by protoc-gen-go-psm. DO NOT EDIT.

package test_spb

import (
	context "context"
	psm "github.com/pentops/protostate/psm"
	sqrlx "github.com/pentops/sqrlx.go/sqrlx"
)

// State Query Service for %sBar
// QuerySet is the query set for the Bar service.

type BarPSMQuerySet = psm.StateQuerySet[
	*GetBarRequest,
	*GetBarResponse,
	*ListBarsRequest,
	*ListBarsResponse,
	*ListBarEventsRequest,
	*ListBarEventsResponse,
]

func NewBarPSMQuerySet(
	smSpec psm.QuerySpec[
		*GetBarRequest,
		*GetBarResponse,
		*ListBarsRequest,
		*ListBarsResponse,
		*ListBarEventsRequest,
		*ListBarEventsResponse,
	],
	options psm.StateQueryOptions,
) (*BarPSMQuerySet, error) {
	return psm.BuildStateQuerySet[
		*GetBarRequest,
		*GetBarResponse,
		*ListBarsRequest,
		*ListBarsResponse,
		*ListBarEventsRequest,
		*ListBarEventsResponse,
	](smSpec, options)
}

type BarPSMQuerySpec = psm.QuerySpec[
	*GetBarRequest,
	*GetBarResponse,
	*ListBarsRequest,
	*ListBarsResponse,
	*ListBarEventsRequest,
	*ListBarEventsResponse,
]

func DefaultBarPSMQuerySpec(tableSpec psm.QueryTableSpec) BarPSMQuerySpec {
	return psm.QuerySpec[
		*GetBarRequest,
		*GetBarResponse,
		*ListBarsRequest,
		*ListBarsResponse,
		*ListBarEventsRequest,
		*ListBarEventsResponse,
	]{
		QueryTableSpec: tableSpec,
		ListRequestFilter: func(req *ListBarsRequest) (map[string]interface{}, error) {
			filter := map[string]interface{}{}
			if req.TenantId != nil {
				filter["tenant_id"] = *req.TenantId
			}
			return filter, nil
		},
		ListEventsRequestFilter: func(req *ListBarEventsRequest) (map[string]interface{}, error) {
			filter := map[string]interface{}{}
			filter["bar_id"] = req.BarId
			return filter, nil
		},
	}
}

type BarQueryServiceImpl struct {
	db       sqrlx.Transactor
	querySet *BarPSMQuerySet
	UnsafeBarServiceServer
}

var _ BarServiceServer = &BarQueryServiceImpl{}

func NewBarQueryServiceImpl(db sqrlx.Transactor, querySet *BarPSMQuerySet) *BarQueryServiceImpl {
	return &BarQueryServiceImpl{
		db:       db,
		querySet: querySet,
	}
}

func (s *BarQueryServiceImpl) GetBar(ctx context.Context, req *GetBarRequest) (*GetBarResponse, error) {
	resObject := &GetBarResponse{}
	err := s.querySet.Get(ctx, s.db, req, resObject)
	if err != nil {
		return nil, err
	}
	return resObject, nil
}

func (s *BarQueryServiceImpl) ListBars(ctx context.Context, req *ListBarsRequest) (*ListBarsResponse, error) {
	resObject := &ListBarsResponse{}
	err := s.querySet.List(ctx, s.db, req, resObject)
	if err != nil {
		return nil, err
	}
	return resObject, nil
}

func (s *BarQueryServiceImpl) ListBarEvents(ctx context.Context, req *ListBarEventsRequest) (*ListBarEventsResponse, error) {
	resObject := &ListBarEventsResponse{}
	err := s.querySet.ListEvents(ctx, s.db, req, resObject)
	if err != nil {
		return nil, err
	}
	return resObject, nil
}
