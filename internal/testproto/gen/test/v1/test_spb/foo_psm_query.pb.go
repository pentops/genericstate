// Code generated by protoc-gen-go-psm. DO NOT EDIT.

package test_spb

import (
	context "context"
	psm "github.com/pentops/protostate/psm"
	sqrlx "github.com/pentops/sqrlx.go/sqrlx"
)

// State Query Service for %sFoo
// QuerySet is the query set for the Foo service.

type FooPSMQuerySet = psm.StateQuerySet[
	*GetFooRequest,
	*GetFooResponse,
	*ListFoosRequest,
	*ListFoosResponse,
	*ListFooEventsRequest,
	*ListFooEventsResponse,
]

func NewFooPSMQuerySet(
	smSpec psm.QuerySpec[
		*GetFooRequest,
		*GetFooResponse,
		*ListFoosRequest,
		*ListFoosResponse,
		*ListFooEventsRequest,
		*ListFooEventsResponse,
	],
	options psm.StateQueryOptions,
) (*FooPSMQuerySet, error) {
	return psm.BuildStateQuerySet[
		*GetFooRequest,
		*GetFooResponse,
		*ListFoosRequest,
		*ListFoosResponse,
		*ListFooEventsRequest,
		*ListFooEventsResponse,
	](smSpec, options)
}

type FooPSMQuerySpec = psm.QuerySpec[
	*GetFooRequest,
	*GetFooResponse,
	*ListFoosRequest,
	*ListFoosResponse,
	*ListFooEventsRequest,
	*ListFooEventsResponse,
]

func DefaultFooPSMQuerySpec(tableSpec psm.QueryTableSpec) FooPSMQuerySpec {
	return psm.QuerySpec[
		*GetFooRequest,
		*GetFooResponse,
		*ListFoosRequest,
		*ListFoosResponse,
		*ListFooEventsRequest,
		*ListFooEventsResponse,
	]{
		QueryTableSpec: tableSpec,
		ListRequestFilter: func(req *ListFoosRequest) (map[string]interface{}, error) {
			filter := map[string]interface{}{}
			if req.TenantId != nil {
				filter["tenant_id"] = *req.TenantId
			}
			return filter, nil
		},
		ListEventsRequestFilter: func(req *ListFooEventsRequest) (map[string]interface{}, error) {
			filter := map[string]interface{}{}
			filter["foo_id"] = req.FooId
			return filter, nil
		},
	}
}

type FooQueryServiceImpl struct {
	db       sqrlx.Transactor
	querySet *FooPSMQuerySet
	UnsafeFooQueryServiceServer
}

var _ FooQueryServiceServer = &FooQueryServiceImpl{}

func NewFooQueryServiceImpl(db sqrlx.Transactor, querySet *FooPSMQuerySet) *FooQueryServiceImpl {
	return &FooQueryServiceImpl{
		db:       db,
		querySet: querySet,
	}
}

func (s *FooQueryServiceImpl) GetFoo(ctx context.Context, req *GetFooRequest) (*GetFooResponse, error) {
	resObject := &GetFooResponse{}
	err := s.querySet.Get(ctx, s.db, req, resObject)
	if err != nil {
		return nil, err
	}
	return resObject, nil
}

func (s *FooQueryServiceImpl) ListFoos(ctx context.Context, req *ListFoosRequest) (*ListFoosResponse, error) {
	resObject := &ListFoosResponse{}
	err := s.querySet.List(ctx, s.db, req, resObject)
	if err != nil {
		return nil, err
	}
	return resObject, nil
}

func (s *FooQueryServiceImpl) ListFooEvents(ctx context.Context, req *ListFooEventsRequest) (*ListFooEventsResponse, error) {
	resObject := &ListFooEventsResponse{}
	err := s.querySet.ListEvents(ctx, s.db, req, resObject)
	if err != nil {
		return nil, err
	}
	return resObject, nil
}
