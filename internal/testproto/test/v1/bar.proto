syntax = "proto3";

package test.v1;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "psm/list/v1/annotations.proto";
import "psm/list/v1/page.proto";
import "psm/list/v1/query.proto";
import "psm/state/v1/annotations.proto";
import "psm/state/v1/metadata.proto";

option go_package = "github.com/pentops/protostate/internal/testproto/gen/testpb";

// BarService is a little strange, it requires a lot of overrides for defaults
// when building the state query and state machine.
service BarService {
  option (psm.state.v1.state_query).name = "bar";

  rpc GetBar(GetBarRequest) returns (GetBarResponse) {
    option (google.api.http) = {get: "/test/v1/bar/{bar_id}"};
    option (psm.state.v1.state_query_method).get = true;
  }

  rpc ListBars(ListBarsRequest) returns (ListBarsResponse) {
    option (google.api.http) = {get: "/test/v1/bars"};
    option (psm.state.v1.state_query_method).list = true;
  }

  rpc ListBarEvents(ListBarEventsRequest) returns (ListBarEventsResponse) {
    option (google.api.http) = {get: "/test/v1/bar/{bar_id}/events"};
    option (psm.state.v1.state_query_method).list_events = true;
  }
}

message GetBarRequest {
  string bar_id = 1 [(buf.validate.field).string.uuid = true];
}

message GetBarResponse {
  BarState state = 1;
  repeated BarEvent events = 2;
}

message BarKeys {
  option (psm.state.v1.psm).name = "bar";

  string bar_id = 2 [
    (buf.validate.field).string.uuid = true,
    (psm.state.v1.field).primary_key = true
  ];

  string bar_other_id = 3 [
    (buf.validate.field).string.uuid = true,
    (psm.state.v1.field).primary_key = true
  ];
}

message BarState {
  psm.state.v1.StateMetadata metadata = 1;

  BarKeys keys = 2;

  BarStatus status = 6 [(psm.list.v1.field).enum.filtering = {
    filterable: true,
    default_filters: ["BAR_STATUS_ACTIVE"]
  }];

  BarStateData data = 7;
}

message BarStateData {
  string tenant_id = 3 [
    (buf.validate.field).string.uuid = true,
    (psm.list.v1.field).string.foreign_key.uuid.filtering.filterable = true
  ];

  string name = 4 [(psm.list.v1.field).string.open_text.searching = {
    searchable: true
    field_identifier: "tsv_name"
  }];

  string field = 5 [(psm.list.v1.field).string.open_text.searching = {
    searchable: true,
    field_identifier: "tsv_field"
  }];
}

enum BarStatus {
  BAR_STATUS_UNSPECIFIED = 0;
  BAR_STATUS_ACTIVE = 1;
  BAR_STATUS_DELETED = 2;
}

message BarEvent {
  psm.state.v1.EventMetadata metadata = 1 [(buf.validate.field).required = true];
  BarKeys keys = 2 [(buf.validate.field).required = true];
  BarEventType event = 3 [(buf.validate.field).required = true];
}

message BarEventType {
  oneof type {
    option (psm.list.v1.oneof).filtering.filterable = true;

    Created created = 1;
    Updated updated = 2;
    Deleted deleted = 3;
  }

  message Created {
    string name = 1;
    string field = 2;
  }

  message Updated {
    string name = 1;
    string field = 2;
  }

  message Deleted {}
}

message ListBarsRequest {
  optional string tenant_id = 1 [(buf.validate.field).string.uuid = true];
  psm.list.v1.PageRequest page = 2;
  psm.list.v1.QueryRequest query = 3;
  option (psm.list.v1.list_request) = {
    sort_tiebreaker: ["keys.bar_id"]
  };
}

message ListBarsResponse {
  repeated BarState bars = 1;
  psm.list.v1.PageResponse page = 2;
}

message ListBarEventsRequest {
  string bar_id = 1 [(buf.validate.field).string.uuid = true];
  psm.list.v1.PageRequest page = 2;
  psm.list.v1.QueryRequest query = 3;
}

message ListBarEventsResponse {
  repeated BarEvent events = 1;
  psm.list.v1.PageResponse page = 2;
}
