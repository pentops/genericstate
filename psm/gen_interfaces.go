package psm

import (
	"context"

	"github.com/pentops/protostate/gen/state/v1/psm_pb"
	"github.com/pentops/sqrlx.go/sqrlx"
	"google.golang.org/protobuf/proto"
)

/*
# Generic Type Parameter Sets

Two sets of generic type sets exist:

`K S ST SD E IE`
`K S ST SD E IE SE`

Both share the same types, as follows, and defined below

### `K IKeyset`
### `S IState[K, ST, SD]`
### `ST IStatusEnum`
### `SD IStateData`
### `SD IStateData,
E IEvent[K, S, ST, SD, IE]`
### `IE IInnerEvent`
### `SE IInnerEvent`

The Specific single typed event *struct* which is the specific event for the transition.
SE implements the same interface of IE.
e.g. *testpb.FooPSMEvent_Created, the concrete proto message which implements testpb.FooPSMEvent


The state machine deals with the first shorter chain, as it deals with all events.
Transitions deal with a single specific event type, so have the extra SE parameter.

K, S, ST, E, and IE are set to one single type for the entire state machine
SE is set to a single type for each transition.
*/

// IGenericProtoMessage is the base extensions shared by all message entities in the PSM generated code
type IPSMMessage interface {
	proto.Message
	PSMIsSet() bool
}

// IStatusEnum is enum representing the named state of the entity.
// e.g. *testpb.FooStatus (int32)
type IStatusEnum interface {
	~int32
	ShortString() string
	String() string
}

type IKeyset interface {
	IPSMMessage
	PSMFullName() string
	PSMKeyValues() (map[string]string, error)
}

// IState[K, ST, SD]is the main State Entity e.g. *testpb.FooState
type IState[K IKeyset, ST IStatusEnum, SD IStateData] interface {
	IPSMMessage
	GetStatus() ST
	SetStatus(ST)
	PSMMetadata() *psm_pb.StateMetadata
	PSMKeys() K
	SetPSMKeys(K)
	PSMData() SD
}

// IStateData is the Data Entity e.g. *testpb.FooStateData
type IStateData interface {
	IPSMMessage
}

// IEvent is the Event Wrapper, the top level which has metadata, foreign keys to the state, and the event itself.
// e.g. *testpb.FooEvent, the concrete proto message
type IEvent[
	K IKeyset,
	S IState[K, ST, SD],
	ST IStatusEnum,
	SD IStateData,
	Inner any,
] interface {
	proto.Message
	UnwrapPSMEvent() Inner
	SetPSMEvent(Inner) error
	PSMKeys() K
	SetPSMKeys(K)
	PSMMetadata() *psm_pb.EventMetadata
	PSMIsSet() bool
}

// IInnerEvent is the typed event *interface* which is the set of all possible events for the state machine
// e.g. testpb.FooPSMEvent interface - this is generated by the protoc plugin in _psm.pb.go
// It is set at compile time specifically to the interface type.
type IInnerEvent interface {
	IPSMMessage
	PSMEventKey() string
}

// TransitionMutation runs at the start of a transition to merge the event
// information into the state data object. The state object is mutable in this
// context.
type TransitionMutation[
	K IKeyset,
	S IState[K, ST, SD],
	ST IStatusEnum,
	SD IStateData,
	E IEvent[K, S, ST, SD, IE],
	IE IInnerEvent,
] interface {
	TransitionMutation(SD, IE) error
	EventType() string
}

// TransitionLogicHook Executes after the mutation is complete. This hook
// can trigger side effects, including chained events, which are additional
// events processed by the state machine. Use this for Business Logic which
// determines the 'next step' in processing.
type TransitionLogicHook[
	K IKeyset,
	S IState[K, ST, SD],
	ST IStatusEnum,
	SD IStateData,
	E IEvent[K, S, ST, SD, IE],
	IE IInnerEvent,
] interface {
	TransitionLogicHook(context.Context, HookBaton[K, S, ST, SD, E, IE], S, IE) error
	EventType() string
}

// TransitionDataHook runs after the mutations, and can be used to update data
// in tables which are not controlled as the state machine, e.g. for
// pre-calculating fields for performance reasons. Use of this hook prevents
// (future) transaction optimizations, as the transaction state
// when the function is called must needs to match the processing state, but
// only for this single transition, unlike the GeneralEventDataHook.
type TransitionDataHook[
	K IKeyset,
	S IState[K, ST, SD],
	ST IStatusEnum,
	SD IStateData,
	E IEvent[K, S, ST, SD, IE],
	IE IInnerEvent,
] interface {
	TransitionDataHook(context.Context, sqrlx.Transaction, S, IE) error
	EventType() string
}

// GeneralLogicHook runs once per transition at the state-machine level
// regardless of which transition / event is being processed. It runs exactly
// once per transition, with the state object in the final state after the
// transition but prior to processing any further events. Chained events are
// added to the *end* of the event queue for the transaction, and side effects
// are published (as always) when the transaction is committed. The function
// MUST be pure, i.e. It MUST NOT produce any side-effects outside of the
// HookBaton, and MUST NOT modify the
// state.
type GeneralLogicHook[
	K IKeyset,
	S IState[K, ST, SD],
	ST IStatusEnum,
	SD IStateData,
	E IEvent[K, S, ST, SD, IE],
	IE IInnerEvent,
] interface {
	GeneralLogicHook(context.Context, HookBaton[K, S, ST, SD, E, IE], S, E) error
}

// GeneralStateDataHook runs at the state-machine level regardless of which
// transition / event is being processed. It runs at-least once before
// committing a database transaction after multiple transitions are complete.
// This hook has access only to the final state after the transitions and is
// used to update other tables based on the resulting state. It MUST be
// idempotent, it may be called after injecting externally-held state data.
type GeneralStateDataHook[
	K IKeyset,
	S IState[K, ST, SD],
	ST IStatusEnum,
	SD IStateData,
	E IEvent[K, S, ST, SD, IE],
	IE IInnerEvent,
] interface {
	GeneralStateDataHook(context.Context, sqrlx.Transaction, S) error
}

// GeneralEventDataHook runs after each transition at the state-machine level regardless of which
// transition / event is being processed. It runs exactly once per transition,
// before any other events are processed. The presence of this hook type
// prevents (future) transaction optimizations, so should be used sparingly.
type GeneralEventDataHook[
	K IKeyset,
	S IState[K, ST, SD],
	ST IStatusEnum,
	SD IStateData,
	E IEvent[K, S, ST, SD, IE],
	IE IInnerEvent,
] interface {
	GeneralEventDataHook(context.Context, sqrlx.Transaction, S, E) error
}
